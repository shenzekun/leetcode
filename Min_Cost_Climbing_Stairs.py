"""
数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。

每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。

您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。

示例 1:

输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。
 示例 2:

输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
输出: 6
解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。
注意：

cost 的长度将会在 [2, 1000]。
每一个 cost[i] 将会是一个Integer类型，范围为 [0, 999]。


思路：动态规划。求到达每一阶的最小成本。倒数第一和倒数第二的最小值即为解。 
我是这么考虑的：把问题缩小，只有两种办法到达第i阶，一种是i-2阶走两步到达，一种是i-1阶走一步到达。题目中说出发点可以任选cost[0]或cost[1]，这里可能稍微有些干扰，会误以为要按照两个初始点分别计算。比如到达cost[2]的方法： 
- cost[1]走一步 
- cost[0]走两步 
- cost[0]走两个一步 
其实说出来就明白了，cost[0]如果选择走两个一步到达cost[2]，那么这在cost[1]走一步到达cost[2]的基础上还要增加花费，完全没有必要考虑上述第三种情况。因此只有两种方法到达某一台阶i.因此到达台阶i的花费即为两种方法中代价最小的。表示为：cost[i] = min(cost[i-2]+cost[i],cost[i-1]+cost[i]). 
动态规划核心就是找到最优子结构，然后自上而下或者自底向上求解问题。如果对时间复杂度有要求的话，最好选择递推，相对递归来说效率高。
由于每次只保存 dp 前两个，因此可以使用两个变量来保存即可
"""


class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        if not cost:
            return None
        dp0 = cost[0]
        dp1 = cost[1]
        for i in range(2, len(cost)):
            dp = min(dp0+cost[i], dp1+cost[i])
            dp0 = dp1
            dp1 = dp
        return min(dp0, dp1)
